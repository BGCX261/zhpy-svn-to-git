http://groups.google.com/group/python-cn/browse_thread/thread/5ad80196ea21f05e/98e3f4273a4f792c?q=%E4%B8%AD%E6%96%87&lnk=ol&

gasolin: 除了中蟒外,前陣子好像有人在寫語法解釋器好方便學員學習,不知進度如何？對這主題有點興趣想 follow 下去, 希望提供連結 :-)

HYRY: 那是我提出的，不过没有什么进度。为了便于教学，写了一个简单的字符串替代程序，对于替代字典里面有的汉语单词，进行替代，例如下面是Python的关键字替代字典，[关键字]若=if如果=if否则如果=elif否则=else......对于字典里面没有的汉语单词，按照s0,s1,s2...的顺序替代，当然相同的汉语单词会替代为同样的符号，把替代好的字符串输出成文件，或者用exec运行。例如下面是未完成的扫雷的游戏的界面部分：从 界面库 载入 *从 消息对话框库 载入 *从 文件对话框库 载入 *从 颜色对话框库 载入 *从 便捷对话框库 载入 *根 = 根窗口()按钮字典 = {}定义 产生按钮事件(按钮坐标):    定义 按钮事件():        全局变量 按钮字典按钮字典[按钮坐标].配置(背景颜色='white',状态=无效)    返回 按钮事件定义 显示关于对话框():    关于对话框 = 窗口()    标签(关于对话框 , 文字="About Mine").安装()临时容器 = 容器(根)临时容器.安装(边=上)标签(临时容器 , 文字="Mine!!!!").安装(边=左)按钮(临时容器 , 文字="about" ,命令=显示关于对话框).安装(边=左)取 列 自 范围(10):    临时容器 = 容器(根)    临时容器.安装(边=左)    取 行 自 范围(10):        临时按钮 = 按钮(临时容器 , 宽度=2 , 高度=1 ,命令=产生按钮事件((行,列)) )        临时按钮.安装(边=上)        按钮字典[(行,列)] = 临时按钮界面主循环()它将被转换为：from Tkinter import *from tkMessageBox import *from tkFileDialog import *from tkColorChooser import *from tkSimpleDialog import *s0 = Tk()s1 = {}def s2(s3):    def s4():        global s1        s1[s3].config(bg='white',state=DISABLED)    return s4def s5():    s6 = Toplevel()    Label(s6 , text="About Mine").pack()s7 = Frame(s0)s7.pack(side=TOP)Label(s7 , text="Mine!!!!").pack(side=LEFT)Button(s7 , text="about" , command=s5).pack(side=LEFT)for s8 in range(10):    s7 = Frame(s0)    s7.pack(side=LEFT)    for s9 in range(10):        s10 = Button(s7 , width=2 , height=1 , command=s2((s9,s8)) )        s10.pack(side=TOP)        s1[(s9,s8)] = s10mainloop()如果出错了的话，再把出错信息中的s0,s1转换回汉字，便于调试。这样，一个文件的程序可以全部用汉语写。反正我是教入门，所有的程序都放在一个文件中就行了。现在问题是没有很好的编辑器，前段时间好不容易用ulipad可以高亮度显示汉语了，可是运行速度比较慢，就放弃了。理想编辑器如果能有以下功能就好了：1. 高亮度显示,自动完成汉语单词，并且可以提示此汉语单词转换后的英文单词以及相关的说明，鼠标移动上去就显示。2. 可以折叠程序快3.可以识别自定义的汉语的变量名，并且可以手工给变量名添加注释和翻译后的英文。 

HYRY: 最新的程序中我可能还修改过一些小地方，不过大致就是下面这个样子，要先安装 pyparsing 库，google一下应该可以找到。我觉得 pyparsing 很好用，如果弄得好的话，也许可以自定义一些简单的语法。# -*- coding: utf-8 -*-from pyparsing import *import osimport ConfigParserimport syspp = os.path.split(sys.argv[0])os.chdir(pp[0])worddict = {}inifiles = [x for x in os.listdir(".") if x.endswith(".ini")]for f in inifiles:    conf = ConfigParser.ConfigParser()    conf.read(f)    sects = conf.sections()    for sect in sects:        for k, v in conf.items(sect):            if worddict.has_key(k):                print "already has key: %s, %s" % (sect, k)            else:                worddict[k] = vreplacedict = {    "（":"(",    "）":")",    "。":".",    """:'"',    """:'"',    "'":"'",    "'":"'",    "，":",",    "：":":",}vnum = 0def convertToEnglish(s,l,t):    global vnum    tmp = t[0].encode("utf8")    if not worddict.has_key(tmp):        worddict[tmp] = "s" + str(vnum)        vnum += 1    english = worddict[tmp]    return english.decode("utf8")chineseChars = srange(r"[\0x0080-\0xfe00]")chineseWord = Word(chineseChars)chineseWord.setParseAction(convertToEnglish)pythonWord = dblQuotedString | chineseWordtest = file(sys.argv[1]).read()if test.startswith("\xef\xbb\xbf"):    test = test[3:]for k, v in replacedict.items():    test = test.replace(k,v)utest = test.decode("utf8")result = pythonWord.transformString(utest)result = result.encode("gb2312")if len(sys.argv)>=3:    file(sys.argv[2],"w").write(result)try:    exec resultexcept Exception, e:    s = str(e)    print s    for k, v in worddict.items():        if "'" + v + "'" in s:            print unicode(k,"utf8"), v 